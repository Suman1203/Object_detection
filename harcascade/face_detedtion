# !pip install opencv-python
**Haar cascade**

It is an object detection method
import cv2
https://github.com/opencv/opencv/tree/master/data/haarcascades
face_cascade=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
#### Image:
img=cv2.imread('file_path',
               cv2.COLOR_BGR2GRAY)
img.shape
cv2.imshow("image",img)  # open a new window to show the image
cv2.waitKey(0)          # if you want to close the image press 0
cv2.destroyAllWindows() # the window will be closed
# all together
# we are reading an image
# we are showing the imgage
# we are applying a wait key
# we are closing the image
img=cv2.imread('file_path',
               cv2.COLOR_BGR2GRAY)

cv2.imshow("image",img)  # open a new window to show the image
cv2.waitKey(0)          # if you want to close the image press 0
cv2.destroyAllWindows()
**cv2.rectangle**:
    
- Image paths

- start_window= (5,5)

- end_window= (200,200)

- BGR : (255,0,0)
    
- thikness= 3
img=cv2.imread('file_path',
               cv2.COLOR_BGR2GRAY)

start_window=(5,5)
end_window= (200,200)
color=(0,0,255)
thikness=5
rec_image=cv2.rectangle(img,
              start_window,
              end_window,
              color,
              thikness)

cv2.imshow("image",rec_image)

cv2.waitKey(0)         
cv2.destroyAllWindows()

# This is the problem 
# we need to provide correct values of start window and end window
img=cv2.imread('file_path',cv2.COLOR_BGR2GRAY)
face_cascade=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
faces=face_cascade.detectMultiScale(img,1.1,4)
print(faces)
for (x,y,w,h) in faces:
    print(x,y)
    print(w,h)
    cv2.rectangle(img,(x,y),(x+w,y+h),(0,0,255),3)   # B G  R  Red Is ON
cv2.imshow('image',img)
cv2.waitKey(0)
cv2.destroyAllWindows()
#face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
#eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')
#### Video:
cap=cv2.VideoCapture(0)
while cap.isOpened():
    has_frame,frame=cap.read()
    imag=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
    faces=face_cascade.detectMultiScale(imag,1.1,4)
    for (x,y,w,h) in faces:
        cv2.rectangle(imag,(x,y),(x+h,y+w),(255,0,0),3)
    cv2.imshow('image',imag)
    if cv2.waitKey(1) & 0xFF== ord('q'):
        break
cap.release()
cv2.destroyAllWindows() 

#### With eyeball:
import cv2
eye_cascade=cv2.CascadeClassifier('haarcascade_eye.xml')
face_cascade=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
img=cv2.imread('file_path',
               cv2.COLOR_BGR2GRAY)
cap=cv2.VideoCapture(0)
while True:
    has_frame,frame=cap.read()
    gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
    faces=face_cascade.detectMultiScale(gray,1.3,5)
    for (x,y,w,h) in faces:
        cv2.rectangle(frame,(x,y),(x+w,y+h),(255,0,0),2)
        roi_gray=gray[y:y+h,x:x+w] #region of the image
        roi_color=frame[y:y+h,x:x+w]
        eyes=eye_cascade.detectMultiScale(roi_gray)
        for (e_x,e_y,e_w,e_h) in eyes:
            cv2.rectangle(roi_color,(e_x,e_y),(e_x+e_w,e_y+e_h),(0,255,0),2)
    cv2.imshow('imag',frame)
    if cv2.waitKey(1) & 0xFF==ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
